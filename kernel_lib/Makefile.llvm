# Makefile for kernel_lib_llvm.a - Extended Runtime Library with LLVM Support
#
# This builds an extended version of kernel_lib with:
# - malloc_llvm.c (200 MB heap, free-list allocator)
# - All standard kernel_lib components
# - For linking with LLVM-enabled unikernel applications

# ============================================================================
# TOOLCHAIN
# ============================================================================

CC = clang-18
CXX = clang++-18
AR = llvm-ar-18

# C flags for bare-metal 64-bit
# Note: HEAP_SIZE = 200MB for LLVM (HEAP_SIZE_SMALL removed)
CFLAGS = -ffreestanding -nostdlib -fno-pie -O2 -Wall -Wextra \
         -fno-stack-protector -mno-red-zone -mcmodel=kernel -DBARE_METAL
         # DEBUG_MALLOC disabled (causes infinite loop)

# C++ flags for cpp_runtime 64-bit
CXXFLAGS = -ffreestanding -nostdlib -fno-pie -O2 -Wall -Wextra \
           -fno-exceptions -fno-rtti -fno-use-cxa-atexit \
           -fno-stack-protector -mno-red-zone -mcmodel=kernel

# ============================================================================
# SOURCE FILES
# ============================================================================

# I/O drivers
IO_SRCS = io/vga.c io/serial.c

# Memory management (using bump allocator - malloc_llvm.c has unresolved issues)
# See docs/phase4/MALLOC_LLVM_DEBUG_SESSION32.md for debug details
MEM_SRCS = memory/malloc_bump.c memory/string.c memory/compiler_rt.c

# CPU drivers
CPU_SRCS = cpu/pic.c cpu/idt.c

# JIT profiling
JIT_SRCS = jit/profile.c

# C++ runtime
CPP_SRCS = cpp_runtime/new.cpp cpp_runtime/exception.cpp \
           cpp_runtime/atexit.cpp cpp_runtime/syscall_stubs.cpp

# All C sources
C_SRCS = $(IO_SRCS) $(MEM_SRCS) $(CPU_SRCS) $(JIT_SRCS)

# Object files
C_OBJS = $(C_SRCS:.c=.o)
CPP_OBJS = $(CPP_SRCS:.cpp=.opp)

ALL_OBJS = $(C_OBJS) $(CPP_OBJS)

# ============================================================================
# TARGETS
# ============================================================================

# Default target
all: kernel_lib_llvm.a

# Build extended library
kernel_lib_llvm.a: $(ALL_OBJS)
	@echo "  [AR]  $@"
	@$(AR) rcs $@ $(ALL_OBJS)
	@echo ""
	@echo "  âœ… Extended library built successfully"
	@echo ""
	@echo "  Library size:"
	@ls -lh $@ | awk '{print "    " $$5 " " $$9}'
	@echo ""
	@echo "  Components:"
	@echo "    - I/O drivers (VGA, serial)"
	@echo "    - Memory (malloc_llvm 200MB + string)"
	@echo "    - CPU (PIC, IDT)"
	@echo "    - JIT profiling"
	@echo "    - C++ runtime (new/delete, exceptions, atexit, syscalls)"
	@echo ""

# Compile .c to .o
%.o: %.c
	@echo "  [CC]  $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compile .cpp to .opp (to avoid conflict with .o)
%.opp: %.cpp
	@echo "  [CXX] $<"
	@$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean build artifacts
clean:
	@echo "  [CLEAN]"
	@rm -f $(C_OBJS) $(CPP_OBJS) kernel_lib_llvm.a

# Rebuild everything
rebuild: clean all

# Show library info
info: kernel_lib_llvm.a
	@echo ""
	@echo "=== kernel_lib_llvm.a Info ==="
	@echo "Size: $$(stat -c%s kernel_lib_llvm.a) bytes ($$(echo "scale=2; $$(stat -c%s kernel_lib_llvm.a)/1024" | bc) KB)"
	@echo ""
	@echo "Symbols exported:"
	@nm kernel_lib_llvm.a | grep " T " | wc -l
	@echo ""
	@echo "Functions by module:"
	@echo "  I/O:       $$(nm kernel_lib_llvm.a | grep -E 'vga_|serial_|keyboard_' | wc -l)"
	@echo "  Memory:    $$(nm kernel_lib_llvm.a | grep -E 'malloc|calloc|free|mem|str' | wc -l)"
	@echo "  CPU:       $$(nm kernel_lib_llvm.a | grep -E 'cpu_|pic_|idt_' | wc -l)"
	@echo "  JIT:       $$(nm kernel_lib_llvm.a | grep -E 'jit_' | wc -l)"
	@echo "  C++:       $$(nm kernel_lib_llvm.a | grep -E '__cxa_|_Z' | wc -l)"
	@echo "  Syscalls:  $$(nm kernel_lib_llvm.a | grep -E 'fprintf|pthread|abort' | wc -l)"
	@echo ""

.PHONY: all clean rebuild info
